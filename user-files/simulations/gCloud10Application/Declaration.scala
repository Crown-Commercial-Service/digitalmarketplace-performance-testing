package gCloud10Application

import scala.concurrent.duration._

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.jdbc.Predef._

class Declaration extends Simulation {

	val httpProtocol = http
		.baseURL("http://localhost")
		.inferHtmlResources(BlackList(""".*\.js""", """.*\.css""", """.*\.gif""", """.*\.jpeg""", """.*\.jpg""", """.*\.ico""", """.*\.woff""", """.*\.(t|o)tf""", """.*\.png"""), WhiteList())
		.acceptHeader("text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8")
		.acceptEncodingHeader("gzip, deflate")
		.acceptLanguageHeader("en-GB,en-US;q=0.9,en;q=0.8")
		.userAgentHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36")

	val headers_0 = Map("Upgrade-Insecure-Requests" -> "1")

	val headers_3 = Map(
		"Origin" -> "http://localhost",
		"Upgrade-Insecure-Requests" -> "1")

	val scn = scenario("Declaration")
		.exec(http("request_0")
			.get("/suppliers/frameworks/g-cloud-10/declaration/start")
			.headers(headers_0))
		.pause(4)
		.exec(http("request_1")
			.get("/suppliers/frameworks/g-cloud-10/declaration/reuse")
			.headers(headers_0))
		.pause(2)
		.exec(http("request_2")
			.get("/suppliers/frameworks/g-cloud-10/declaration/edit/providing-suitable-services")
			.headers(headers_0))
		.pause(6)
		.exec(http("request_3")
			.post("/suppliers/frameworks/g-cloud-10/declaration/edit/providing-suitable-services")
			.headers(headers_3)
			.formParam("servicesHaveOrSupport", "True")
			.formParam("servicesDoNotInclude", "True")
			.formParam("payForWhatUse", "True")
			.formParam("offerServicesYourselves", "True")
			.formParam("fullAccountability", "True"))
		.pause(6)
		.exec(http("request_4")
			.post("/suppliers/frameworks/g-cloud-10/declaration/edit/what-it-means-to-be-on-g-cloud-10")
			.headers(headers_3)
			.formParam("termsOfParticipation", "True")
			.formParam("termsAndConditions", "True")
			.formParam("canProvideFromDayOne", "True")
			.formParam("unfairCompetition", "True")
			.formParam("10WorkingDays", "True")
			.formParam("MI", "True"))
		.pause(16)
		.exec(http("request_5")
			.post("/suppliers/frameworks/g-cloud-10/declaration/edit/grounds-for-mandatory-exclusion")
			.headers(headers_3)
			.formParam("conspiracy", "False")
			.formParam("corruptionBribery", "False")
			.formParam("fraudAndTheft", "False")
			.formParam("terrorism", "False")
			.formParam("organisedCrime", "False"))
		.pause(10)
		.exec(http("request_6")
			.post("/suppliers/frameworks/g-cloud-10/declaration/edit/grounds-for-discretionary-exclusion")
			.headers(headers_3)
			.formParam("taxEvasion", "False")
			.formParam("environmentalSocialLabourLaw", "False")
			.formParam("bankrupt", "False")
			.formParam("graveProfessionalMisconduct", "False")
			.formParam("distortingCompetition", "False")
			.formParam("conflictOfInterest", "False")
			.formParam("distortedCompetition", "False")
			.formParam("significantOrPersistentDeficiencies", "False")
			.formParam("seriousMisrepresentation", "False")
			.formParam("witheldSupportingDocuments", "False")
			.formParam("influencedContractingAuthority", "False")
			.formParam("confidentialInformation", "False")
			.formParam("misleadingInformation", "False")
			.formParam("mitigatingFactors", "")
			.formParam("unspentTaxConvictions", "False")
			.formParam("GAAR", "False")
			.formParam("mitigatingFactors2", ""))
		.pause(7)
		.exec(http("request_7")
			.post("/suppliers/frameworks/g-cloud-10/declaration/edit/working-with-government")
			.headers(headers_3)
			.formParam("environmentallyFriendly", "True")
			.formParam("equalityAndDiversity", "True")
			.formParam("employersInsurance", "Yes – your organisation has, or will have in place, employer’s liability insurance of at least £5 million and you will provide certification before the framework is awarded.")
			.formParam("helpBuyersComplyTechnologyCodesOfPractice", "True")
			.formParam("publishContracts", "True"))
		.pause(4)
		.exec(http("request_8")
			.post("/suppliers/frameworks/g-cloud-10/declaration/edit/how-you-apply")
			.headers(headers_3)
			.formParam("readUnderstoodGuidance", "True")
			.formParam("understandTool", "True")
			.formParam("understandHowToAskQuestions", "True"))
		.pause(6)
		.exec(http("request_9")
			.post("/suppliers/frameworks/g-cloud-10/declaration/edit/application-accuracy")
			.headers(headers_3)
			.formParam("accurateInformation", "True")
			.formParam("informationChanges", "True")
			.formParam("accuratelyDescribed", "True")
			.formParam("proofOfClaims", "True"))
		.pause(9)
		.exec(http("request_10")
			.post("/suppliers/frameworks/g-cloud-10/declaration/edit/how-youll-deliver-your-services")
			.headers(headers_3)
			.formParam("subcontracting", "yourself without the use of third parties (subcontractors)"))
		.pause(26)
		.exec(http("request_11")
			.post("/suppliers/frameworks/g-cloud-10/declaration/edit/contact-details")
			.headers(headers_3)
			.formParam("primaryContact", "Mrs L. Test")
			.formParam("primaryContactEmail", "load@test.com")
			.formParam("contactNameContractNotice", "Mrs L. Test")
			.formParam("contactEmailContractNotice", "load@test.com")
			.formParam("save_and_return_to_overview", "Save and return to declaration overview"))
		.pause(4)
		.exec(http("request_12")
			.post("/suppliers/frameworks/g-cloud-10/declaration")
			.headers(headers_3))

	setUp(scn.inject(atOnceUsers(1))).protocols(httpProtocol)
}
